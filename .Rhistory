plot=F)
length(ans$loc)
}
agg <- 1:12
plot(data.frame(agg,
breakouts=sapply(agg, function(p) agg.fn(data=d, window=p))))
agg.fn <- function(data, window) {
r <- range(data$timestamp)
ans <- data %>%
group_by(findInterval(data$timestamp,
seq.POSIXt(r[1],r[2],
by= paste(window,"hour")))) %>%
summarise(timestamp=min(timestamp), count=median(count)) %>%
select(-1) %>%
breakout(
min.size = 240, # equals 10 days of data,
# i.e., the shift must last more than 10 days
method = 'multi',
degree= 1,      # default
beta= 0.0008,    # default, but cannot be omitted
percent= 0.25,
plot=F)
length(ans$loc)
}
plot(data.frame(agg,
breakouts=sapply(agg, function(p) agg.fn(data=d, window=p))))
title(main=" # changepoints for given smoother window",
xlab="smoother window (hr)", ylab="breakouts")
source('~/Rprojects/FlowMon_drift/model_training.R', echo=TRUE)
breakout(
data,
min.size = 240, # equals 10 days of data,
# i.e., the shift must last more than 10 days
method = 'multi',
degree= 0,      # default
beta= 0.005,    # default, but cannot be omitted
percent= 0.1,
plot=T)$plot
breakout(
d,
min.size = 240, # equals 10 days of data,
# i.e., the shift must last more than 10 days
method = 'multi',
degree= 0,      # default
beta= 0.005,    # default, but cannot be omitted
percent= 0.1,
plot=T)$plot
breakout(
d,
min.size = 240, # equals 10 days of data,
# i.e., the shift must last more than 10 days
method = 'multi',
degree= 0,      # default
beta= 0.005,    # default, but cannot be omitted
percent= 1,
plot=T)$plot
breakout(
d,
min.size = 240, # equals 10 days of data,
# i.e., the shift must last more than 10 days
method = 'multi',
degree= 0,      # default
beta= 0.05,    # default, but cannot be omitted
percent= 1,
plot=T)$plot
breakout(
d,
min.size = 9600, # equals 10 days of data,
# i.e., the shift must last more than 10 days
method = 'multi',
degree= 0,      # default
beta= 0.05,    # default, but cannot be omitted
percent= 1,
plot=T)$plot
breakout(
d,
min.size = 960, # equals 10 days of data,
# i.e., the shift must last more than 10 days
method = 'multi',
degree= 0,      # default
beta= 0.05,    # default, but cannot be omitted
percent= 1,
plot=T)$plot
breakout(
d,
min.size = 960, # equals 10 days of data,
# i.e., the shift must last more than 10 days
method = 'multi',
degree= 0,      # default
beta= 0.5,    # default, but cannot be omitted
percent= 1,
plot=T)$plot
breakout(
d,
min.size = 960, # equals 10 days of data,
# i.e., the shift must last more than 10 days
method = 'multi',
degree= 0,      # default
beta= 0.008,    # default, but cannot be omitted
percent= 1,
plot=T)$plot
breakout(
d,
min.size = 960, # equals 10 days of data,
# i.e., the shift must last more than 10 days
method = 'multi',
degree= 0,      # default
beta= 0.008,    # default, but cannot be omitted
percent= 0.5,
plot=T)$plot
breakout(
d,
min.size = 480, # equals 10 days of data,
# i.e., the shift must last more than 10 days
method = 'multi',
degree= 0,      # default
beta= 0.008,    # default, but cannot be omitted
percent= 0.5,
plot=T)$plot
breakout(
d,
min.size = 480, # equals 10 days of data,
# i.e., the shift must last more than 10 days
method = 'multi',
degree= 0,      # default
beta= 0.008,    # default, but cannot be omitted
percent= 1,
plot=T)$plot
breakout(
d,
min.size = 480, # equals 10 days of data,
# i.e., the shift must last more than 10 days
method = 'multi',
degree= 0,      # default
beta= 0.008,    # default, but cannot be omitted
percent= 0.6,
plot=T)$plot
breakout(
d,
min.size = 420, # equals 10 days of data,
# i.e., the shift must last more than 10 days
method = 'multi',
degree= 0,      # default
beta= 0.008,    # default, but cannot be omitted
percent= 0.6,
plot=T)$plot
breakout(
d,
min.size = 420, # equals 10 days of data,
# i.e., the shift must last more than 10 days
method = 'multi',
degree= 0,      # default
beta= 0.08,    # default, but cannot be omitted
percent= 0.6,
plot=T)$plot
breakout(
d,
min.size = 420, # equals 10 days of data,
# i.e., the shift must last more than 10 days
method = 'multi',
degree= 0,      # default
beta= 0.8,    # default, but cannot be omitted
percent= 0.6,
plot=T)$plot
breakout(
d,
min.size = 420, # equals 10 days of data,
# i.e., the shift must last more than 10 days
method = 'multi',
degree= 0,      # default
beta= 0.8,    # default, but cannot be omitted
percent= 1,
plot=T)$plot
breakout(
d,
min.size = 420, # equals 10 days of data,
# i.e., the shift must last more than 10 days
method = 'multi',
degree= 0,      # default
beta= 0.8,    # default, but cannot be omitted
percent= 1.5,
plot=T)$plot
breakout(
d,
min.size = 420, # equals 10 days of data,
# i.e., the shift must last more than 10 days
method = 'multi',
degree= 0,      # default
beta= 0.8,    # default, but cannot be omitted
percent= 5,
plot=T)$plot
source('~/Rprojects/FlowMon_drift/model_training/model_training.R', echo=TRUE)
x <- breakout(
d,
min.size = min.size.default,
method = 'multi',
degree= degree.default,
beta= beta.default,
percent= percent.default,
plot=T)
str(x)
loc <- breakout(
d,
min.size = min.size.default,
method = 'multi',
degree= degree.default,
beta= beta.default,
percent= percent.default,
plot=T)$loc
plot(d)
abline(y=loc)
abline(h=loc)
abline(h=d[loc,"timestamp"])
d[loc,"timestamp"]
dev.off()
plot(d)
abline(h=d[loc,"timestamp"])
dev.off()
plot(d, type='l')
abline(h=d[loc,"timestamp"])
dev.off()
plot(d, type='l')
abline(v=d[loc,"timestamp"])
abline(v=d[loc,"timestamp"], col='red', lty=2)
dev.off()
plot(d, type='l')
abline(v=d[loc,"timestamp"], col='red', lty=2)
source('~/Rprojects/FlowMon_drift/model_training/model_training.R', echo=TRUE)
dev.off()
source('~/Rprojects/FlowMon_drift/model_training/model_training.R', echo=TRUE)
d <- d %>%
group_by(findInterval(d$timestamp,
seq.POSIXt(r[1],r[2],
by= paste(5,"hour")))) %>%
summarise(timestamp=min(timestamp), count=median(count)) %>%
select(-1)
r <- range(d$timestamp)
d<- d %>%
group_by(findInterval(d$timestamp,
seq.POSIXt(r[1],r[2],
by= paste(window,"hour")))) %>%
summarise(timestamp=min(timestamp), count=median(count)) %>%
select(-1)
d<- d %>%
group_by(findInterval(d$timestamp,
seq.POSIXt(r[1],r[2],
by= paste(4,"hour")))) %>%
summarise(timestamp=min(timestamp), count=median(count)) %>%
select(-1)
d <- dl.data(site, qtrYr, type) %>%
filter(minute(timestamp)==0)
d<- d %>%
group_by(findInterval(d$timestamp,
seq.POSIXt(r[1],r[2],
by= paste(5,"hour")))) %>%
summarise(timestamp=min(timestamp), count=median(count)) %>%
select(-1)
loc <- breakout(
d,
min.size = min.size.default,
method = 'multi',
degree= degree.default,
beta= beta.default,
percent= percent.default,
plot=F)$loc
plot(d, type='l')
abline(v=d[loc,"timestamp"], col='red', lty=2)
source('~/Rprojects/FlowMon_drift/model_training/model_training.R', echo=TRUE)
exp(2)
exp(1)
exp(4)
exp(4)*0.001
exp(4)*0.0001
exp(10)*0.0001
exp(1)
exp(1)*0.0001
source('~/Rprojects/FlowMon_drift/model_training/model_training.R', echo=TRUE)
?breakout
source('~/Rprojects/FlowMon_drift/model_training/model_training.R', echo=TRUE)
data=d
ans <- rollmedian(x = zoo(data$timestamp, data$count),
k = window)%>%
as.data.frame(.)
library(zoo)
ans <- rollmedian(x = zoo(data$timestamp, data$count),
k = window)%>%
as.data.frame(.)
zoo(data$timestamp, data$count)
ans <- rollmedian(x = zoo(order.by = data$timestamp,
x = data$count),
k = window)%>%
as.data.frame(.)
ans <- rollmedian(x = zoo(order.by = data$timestamp,
x = data$count),
k = 3)%>%
as.data.frame(.)
View(ans)
ans <- rollmedian(x = zoo(order.by = data$timestamp,
x = data$count),
k = 3)%>%
data.frame(timestamp=index(.),
count=coredata(.))
View(ans)
ans <- rollmedian(x = zoo(order.by = data$timestamp,
x = data$count),
k = 3)%>%
transmute(timestamp=index(.),
count=coredata(.))
d <- rollmedian(x = zoo(order.by = data$timestamp,
x = data$count),
k = 3)
d <- data.frame(timestamp=index(d),
count=coredata(d))
View(d)
source('~/Rprojects/FlowMon_drift/model_training/model_training.R', echo=TRUE)
library(readxl)
read_xlsx('tracking_sheet.xlsx')
source('~/Rprojects/FlowMon_drift/model_training/model_training.R', echo=TRUE)
help(breakout)
source('~/Rprojects/FlowMon_drift/model_training/model_training.R', echo=TRUE)
t <- function(data, window) {
d <- rollmedian(x = zoo(order.by = data$timestamp,
x = data$count),
k = window)
d <- data.frame(timestamp=index(d),
count=coredata(d))
plot(d,type='b')
}
agg <- seq(1, 13, 2)
sapply(agg, function(p) t(data=d, window=p)))
sapply(agg, function(p) t(data=d, window=p))
t <- function(data, window) {
d <- rollmedian(x = zoo(order.by = data$timestamp,
x = data$count),
k = window)
d <- data.frame(timestamp=index(d),
count=coredata(d))
plot(d,type='b')
}
agg <- seq(1, 101, 12)
sapply(agg, function(p) t(data=d, window=p))
t <- function(data, window) {
d <- rollmedian(x = zoo(order.by = data$timestamp,
x = data$count),
k = window)
d <- data.frame(timestamp=index(d),
count=coredata(d))
line(d)
}
agg <- seq(1, 101, 12)
plot(d)
sapply(agg, function(p) t(data=d, window=p))
t <- function(data, window) {
d <- rollmedian(x = zoo(order.by = data$timestamp,
x = data$count),
k = window)
d <- data.frame(timestamp=index(d),
count=coredata(d))
line(d)
}
plot(d)
For (i in seq(1, 101, 12)) t(data=d, window=i)
for(i in seq(1, 101, 12)) t(data=d, window=i)
plot(d)
for(i in seq(1, 101, 12)) t(data=d, window=i)
t <- function(data, window) {
d <- rollmedian(x = zoo(order.by = data$timestamp,
x = data$count),
k = window)
d <- data.frame(timestamp=index(d),
count=coredata(d))
lines(d)
}
plot(d)
for(i in seq(1, 101, 12)) t(data=d, window=i)
t <- function(data, window) {
d <- rollmedian(x = zoo(order.by = data$timestamp,
x = data$count),
k = window)
d <- data.frame(timestamp=index(d),
count=coredata(d))
lines(d, col=sample(1:10,1), type='l')
}
plot(d)
for(i in seq(1, 101, 12)) t(data=d, window=i)
t <- function(data, window) {
d <- rollmedian(x = zoo(order.by = data$timestamp,
x = data$count),
k = window)
d <- data.frame(timestamp=index(d),
count=coredata(d))
lines(d, col=sample(1:10,1), type='l')
}
plot(d, type='l')
for(i in seq(1, 101, 12)) t(data=d, window=i)
legend()
plot(d, type='l')
for(i in seq(1, 101, 12)) t(data=d, window=i)
legend()
dev.off()
plot(d, type='l')
for(i in seq(1, 101, 12)) t(data=d, window=i)
t <- function(data, window) {
d <- rollmedian(x = zoo(order.by = data$timestamp,
x = data$count),
k = window)
d <- data.frame(timestamp=index(d),
count=coredata(d))
lines(d, col=(window-1)/12+1, type='l')
}
for(i in seq(1, 101, 12)) t(data=d, window=i)
t <- function(data, window) {
d <- rollmedian(x = zoo(order.by = data$timestamp,
x = data$count),
k = window)
d <- data.frame(timestamp=index(d),
count=coredata(d))
lines(d, col=(window-1)/12+1, type='l')
}
plot(d, type='l')
for(i in seq(1, 101, 12)) t(data=d, window=i)
source('~/Rprojects/FlowMon_drift/model_training/model_training.R', echo=TRUE)
?legend
t <- function(data, window) {
d <- rollmedian(x = zoo(order.by = data$timestamp,
x = data$count),
k = window)
d <- data.frame(timestamp=index(d),
count=coredata(d))
lines(d, col=(window-1)/12+1, type='l')
}
plot(d, type='l')
for(i in seq(1, 101, 12)) t(data=d, window=i)
legend(x=min(d$timestamp)*1.1,
y=9.5,
col=1:9)
legend(x=min(d$timestamp)*1.1,
y=9.5,
legend = 1:9
col=1:9)
legend(x=min(d$timestamp)*1.1,
y=9.5,
legend = 1:9,
col=1:9)
legend(x=min(d$timestamp)+1000,
y=9.5,
legend = 1:9,
col=1:9)
legend(x=min(d$timestamp)+1000,
y=9.5,
legend ="count",
col=1:9)
dev.off()
plot(d, type='l')
for(i in seq(1, 101, 12)) t(data=d, window=i)
legend(x=min(d$timestamp)+1000,
y=9.5,
legend ="count",
col=1:9)
seq(1, 101, 12)
dev.off()
plot(d, type='l')
for(i in seq(1, 101, 12)) t(data=d, window=i)
legend(x=min(d$timestamp)+1000,
y=9.5,
legend = paste("window=",seq(1, 101, 12)),
col=1:9)
dev.off()
plot(d, type='l')
for(i in seq(1, 101, 12)) t(data=d, window=i)
legend(x=min(d$timestamp),
legend = paste("window=",seq(1, 101, 12)),
col=1:9)
dev.off()
plot(d, type='l')
for(i in seq(1, 101, 12)) t(data=d, window=i)
legend(legend = paste("window=",seq(1, 101, 12)),
col=1:9)
min(d$timestamp)
legend(x=min(d$timestamp), y=90,
legend = paste("window=",seq(1, 101, 12)),
col=1:9)
dev.off()
plot(d, type='l')
for(i in seq(1, 101, 12)) t(data=d, window=i)
legend(x=min(d$timestamp), y=90,
legend = paste("window=",seq(1, 101, 12)),
col=1:9,lty = 1, box.lty = 0)
legend(x=min(d$timestamp)+500, y=90,
legend = paste("window=",seq(1, 101, 12)),
col=1:9,lty = 1, box.lty = 0)
dev.off()
plot(d, type='l')
for(i in seq(1, 101, 12)) t(data=d, window=i)
legend(x=min(d$timestamp)+500, y=90,
legend = paste("window=",seq(1, 101, 12)),
col=1:9,lty = 1, box.lty = 0)
dev.off()
plot(d, type='l')
for(i in seq(1, 101, 12)) t(data=d, window=i)
legend(x=mean(range(d$timestamp)), y=90,
legend = paste("window=",seq(1, 101, 12)),
col=1:9,lty = 1, box.lty = 0)
dev.off()
plot(d, type='l')
for(i in seq(1, 101, 12)) t(data=d, window=i)
legend(x=mean(range(d$timestamp)), y=90,
legend = paste("window=",seq(1, 101, 12)),
col=1:9,lty = 1,lwd = 3, box.lty = 0)
source('~/Rprojects/FlowMon_drift/model_training/model_training.R', echo=TRUE)
?breakout
source('~/Rprojects/FlowMon_drift/model_training/model_training.R', echo=TRUE)
